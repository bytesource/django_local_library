"""
Django settings for locallibrary project.

Generated by 'django-admin startproject' using Django 1.10.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 't2-wr0$(^-^9#jomsc58m+)v1g5@rpgnv9^5+1pjih$(l(0ivz'
import os
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'abcdefg_default')


# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True

DEBUG = bool(os.environ.get('DJANGO_DEBUT', True))
# NOTE: Environment variable values are stored as Python strings, 
#       and the only string that evaluates as False is the empty string
#       (e.g. bool('')==False).

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'catalog.apps.CatalogConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'locallibrary.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['./templates',], # auth template folder
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'locallibrary.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

# https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Redirect to home URL after login (Default redirects to /accounts/profile/).
# http://stackoverflow.com/questions/23772001/redirect-after-login-simply-appends-login-redirect-url
LOGIN_REDIRECT_URL = '/'

# Sends email to console for testing purposes.
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Heroku
# ================
# Heroku recommends that developers use the dj-database-url package 
# to parse the DATABASE_URL environment variable and 
# automatically convert it to Djangoâ€™s desired configuration format.
import dj_database_url
db_from_env = dj_database_url.config(conn_max_age=500)
# The value conn_max_age=500 makes the connection persistent, 
# which is far more efficient than recreating the connection on every request cycle. 
# This is however optional, and can be removed if needed.
DATABASES['default'].update(db_from_env)
# We'll still be using SQLite during development because the DATABASE_URL environment variable 
# will not be set on our development computer.

# NOTE: Django needs psycopg2 to work with Postgres databases (we cannot use SQLite on Heroku),
#       and you will need to add this to the requirements.txt 
#       for Heroku to set this up on the remote server.

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/
STATIC_URL = '/static/'

# The absolute path to the directory where collectstatic will collect static files for deployment.
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# The URL to use when referring to static files (where they will be served from)
STATIC_URL = '/static/'

# NOTE: Heroku automatically calls collectstatic and prepares your static files 
#       for use by WhiteNoise (https://pypi.org/project/whitenoise/) after it uploads your application.
# 1. pip3 install whitenoise
# 2. See locallibrary/wsgi.py


# Simplified static file serving
# https://warehouse.python.org/project/whitenoise
STATICFILES_STORAGE = 'whitenoise.django.GzipManifestStaticFilesStorage'